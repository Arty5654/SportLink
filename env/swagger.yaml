openapi: "3.0.2"
info:
  title: "Sportlink API"
  version: "1.0"

paths:
  /refresh_msg:
    post:
      operationId: app.refresh_msg
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_key:
                  type: string
      responses:
        "200":
          description: "Refreshed Messages"
  /messages:
    post:
      operationId: app.init_messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friends:
                  type: array
      responses:
        "200":
          description: "Checked Messages"
  /stats:
    post:
      operationId: app.check_stats
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: array
      responses:
        "200":
          description: "Checked Stats"

  /fetch_friends:
    post:
      operationId: app.fetch_friends
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: "Created Request"
  /create:
    post:
      operationId: app.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                desc:
                  type: string
                city:
                  type: string
                open:
                  type: boolean
                sport:
                  type: string
                currentParticipants:
                  type: integer
                maxParticipants:
                  type: integer
                participants:
                  type: array
                level:
                  type: string
      responses:
        "200":
          description: "Created Request"

  /update_games:
    post:
      operationId: app.gamesUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skill:
                  type: integer
                maxPlayers:
                  type: integer
                sport:
                  type: string
                gameID:
                  type: integer
                location:
                  type: string

      responses:
        "200":
          description: "Success!"
  # account creation endpoints
  /create_account:
    post:
      operationId: app.create_account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                friends:
                  type: array
                  default: []
                  items:
                    type: string
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        "401":
          description: Email already has an account!

  /google_signin:
    post:
      operationId: app.google_signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                googleId:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        "201":
          description: Google User Account Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        "200":
          description: Google User Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  city:
                    type: string
                  phoneNumber:
                    type: string
                  age:
                    type: integer
                  state:
                    type: string
                  gender:
                    type: string
                  country:
                    type: string
                  address:
                    type: string
                  zipCode:
                    type: string
                  birthday:
                    type: string
                  displayAge:
                    type: boolean
                    description: "Toggle age visibility"
                  displayLocation:
                    type: boolean
                    description: "Toggle location visibility"
                  accountPrivacy:
                    type: boolean
                    description: "Toggle account privacy"
                  displayPhoneNumber:
                    type: string
                    description: "Toggle phone number visibility"
                  sendEmails:
                    type: boolean
                    default: true
                    description: "Toggle email notifications"
                  showInApp:
                    type: boolean
                    default: true
                    description: "Toggle in-app notifications"
                  friends:
                    type: array
                    default: []
                    items:
                      type: string
                  profileImage:
                    type: string
                  imageData:
                    type: string
                required:
                  - username
        "401":
          description: Incorrect email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  #login endpoint
  /login:
    post:
      operationId: app.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phoneNumber:
                    type: string
                  age:
                    type: integer
                  city:
                    type: string
                  state:
                    type: string
                  country:
                    type: string
                  address:
                    type: string
                  gender:
                    type: string
                  zipCode:
                    type: string
                  birthday:
                    type: string
                  friends:
                    type: array
                    items:
                      type: string
                  displayAge:
                    type: boolean
                    description: "Toggle age visibility"
                  displayLocation:
                    type: boolean
                    description: "Toggle location visibility"
                  accountPrivacy:
                    type: boolean
                    description: "Toggle account privacy"
                  displayPhoneNumber:
                    type: string
                    description: "Toggle phone number visibility"
                  profileImage:
                    type: string
                  imageData:
                    type: string
                  sendEmails:
                    type: boolean
                    default: true
                    description: "Toggle email notifications"
                  showInApp:
                    type: boolean
                    default: true
                    description: "Toggle in-app notifications"
                required:
                  - email
                  - username
        "401":
          description: Incorrect email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /get_token:
    post:
      operationId: app.get_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password Reset email sent!
        "401":
          description: Email does not exist!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /input_reset_token:
    post:
      operationId: app.input_reset_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                reqToken:
                  type: string
      responses:
        "200":
          description: Password Token Verified!
        "401":
          description: Incorrect token!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /change_user_password:
    post:
      operationId: app.change_password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Password Changed!
        "401":
          description: Error!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /update_profile:
    post:
      operationId: app.update_user_profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                phoneNumber:
                  type: string
                address:
                  type: string
                state:
                  type: string
                country:
                  type: string
                zipCode:
                  type: string
                city:
                  type: string
                age:
                  type: string
                gender:
                  type: string
                birthday:
                  type: string
                profileImage:
                  type: string
                imageData:
                  type: string
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /privacy:
    post:
      summary: "Update privacy settings"
      operationId: app.update_user_privacy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayAge:
                  type: boolean
                  description: "Toggle age visibility"
                displayLocation:
                  type: boolean
                  description: "Toggle location visibility"
                accountPrivacy:
                  type: boolean
                  description: "Toggle account privacy"
                displayPhoneNumber:
                  type: string
                  description: "Toggle phone number visibility"
      responses:
        "200":
          description: "Profile updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  #   /update_games:
  #     post:
  #       operationId: app.gamesUpdate
  #       requestBody:
  #         required: true
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 skill:
  #                   type: int
  #                 maxPlayers:
  #                   type: int
  #                 sport:
  #                   type: string
  #                 location:
  #                   type: string
  #                 which:
  #                   type: int
  #       responses:
  #         '201':
  #           description: User created successfully
  #         '401':
  #           description: Email already has an account!

  # friends endpoint
  /send_friend_request:
    post:
      operationId: app.send_friend_request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friend_email:
                  type: string
      responses:
        "200":
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Friend does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: Request Pending / Already Friends
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /accept_friend_request:
    post:
      operationId: app.accept_friend_request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friend_email:
                  type: string
      responses:
        "200":
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Friend request already accepted!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /deny_friend_request:
    post:
      operationId: app.deny_friend_request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friend_email:
                  type: string
      responses:
        "200":
          description: Friend request denied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Friend request already denied!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /get_friend_requests:
    get:
      operationId: app.get_friend_requests
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve friend requests.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Friend requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    friend:
                      type: string
                    status:
                      type: string
        "404":
          description: No friend requests found!
  /get_friends:
    get:
      operationId: app.get_friends
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve friends.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Friends retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    friend:
                      type: string
                    status:
                      type: string
        "404":
          description: No friends found!
  /remove_friend:
    post:
      operationId: app.remove_friend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friend_email:
                  type: string
      responses:
        "200":
          description: Friend removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Friend not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /user_lookup:
    get:
      operationId: app.user_lookup
      parameters:
        - name: searchTerm
          in: query
          description: The search term (username, email, or phone number) to look up.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    profileImage:
                      type: string
                    imageData:
                      type: string
        "404":
          description: No results found!

  /get_user_info:
    get:
      summary: Get User Information
      description: Retrieve user information from the database.
      operationId: app.get_user_info
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve information.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  address:
                    type: string
                  state:
                    type: string
                  country:
                    type: string
                  zipCode:
                    type: string
                  city:
                    type: string
                  age:
                    type: string
                  birthday:
                    type: string
                  gender:
                    type: string
                  imageData:
                    type: string
                  profileImage:
                    type: string
                  blocked:
                    type: boolean
                  blocker:
                    type: string
                  blocked_users:
                    type: array
        "404":
          description: User not found

  /submit_report:
    post:
      operationId: app.submit_report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reportReason:
                  type: string
                reportedUserEmail:
                  type: string
      responses:
        "200":
          description: Reported Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Not reported
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /delete_account:
    post:
      operationId: app.delete_account
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: Account deleted
        "401":
          description: Error deleting account

  /get_events:
    get:
      summary: Get Event Information
      description: Retrieve event information from the database.
      operationId: app.get_events
      responses:
        "200":
          description: Event information retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    objectID:
                      type: string
                    title:
                      type: string
                    sport:
                      type: string
                    city:
                      type: string
                    desc:
                      type: string
                    level:
                      type: string
                    open:
                      type: boolean
                    currentParticipants:
                      type: integer
                    maxParticipants:
                      type: integer
        "404":
          description: Event not found

  /get_event_details:
    get:
      summary: Get Event Details
      description: Retrieve detailed information about a specific event.
      operationId: app.get_event_details
      parameters:
        - name: id
          in: query
          description: The ID of the event to retrieve details for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  sport:
                    type: string
                  city:
                    type: string
                  desc:
                    type: string
                  level:
                    type: string
                  open:
                    type: boolean
                  currentParticipants:
                    type: integer
                  maxParticipants:
                    type: integer
                  participants:
                    type: array
                    default: []
                    items:
                      type: string
        "404":
          description: Event not found

  /join_event:
    post:
      summary: Join Event
      description: Join an event.
      operationId: app.join_event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
      responses:
        "200":
          description: Event joined successfully
        "400":
          description: Bad request, missing required parameters or event is full

  /leave_event:
    post:
      summary: Leave Event
      description: Leave an event.
      operationId: app.leave_event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
      responses:
        "200":
          description: Event left successfully
        "400":
          description: Bad request

  /get_reports:
    get:
      operationId: app.get_reports
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve reports.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Friend requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    reportReason:
                      type: string
                    timestamp:
                      type: string
        "404":
          description: No friend requests found!

  /block_user:
    post:
      operationId: app.block_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blocker:
                  type: string
                blocked_users:
                  type: string
                blocked:
                  type: boolean
      responses:
        "200":
          description: Blocked Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Not Blocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /get_blocked_users:
    get:
      operationId: app.get_blocked_users
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve blocked_users.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blocked successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    blocked_users:
                      type: array
                    blocked:
                      type: boolean
        "404":
          description: User not found!

  /unblock_user:
    post:
      operationId: app.unblock_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blocker:
                  type: string
                blocked_user:
                  type: string
                blocked:
                  type: boolean
      responses:
        "200":
          description: Unblocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /get_all_events:
    get:
      operationId: app.get_all_events
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve blocked_users.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blocked successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    sport:
                      type: string
                    city:
                      type: string
                    desc:
                      type: string
                    level:
                      type: string
                    open:
                      type: boolean
                    currentParticipants:
                      type: integer
                    maxParticipants:
                      type: integer
                    participants:
                      type: array
                      default: []
                    items:
                      type: string
        "404":
          description: User not found!
  # notification preferences
  /get_user_notifs_settings:
    get:
      operationId: app.get_user_notifs_settings
      parameters:
        - name: email
          in: query
          description: The email of the user to retrieve notification settings.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Notification settings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sendEmails:
                      type: boolean
                    showInApp:
                      type: boolean
        "404":
          description: User not found
  /set_user_notifs_settings:
    post:
      operationId: app.set_user_notifs_settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                sendEmails:
                  type: boolean
                showInApp:
                  type: boolean
      responses:
        "200":
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: User not found

  /add_event_history:
    post:
      summary: Add event to history
      description: Add event to history
      operationId: app.add_event_history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                event:
                  type: string
      responses:
        "200":
          description: Event added to history
        "400":
          description: Bad request, missing required parameters or event is full

  /delete_event_history:
    post:
      summary: Delete event to history
      description: Delete event to history
      operationId: app.delete_event_history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                event:
                  type: string
      responses:
        "200":
          description: Event added to history
        "400":
          description: Bad request, missing required parameters or event is full

  /get_event_history:
    get:
      summary: Get Event History
      description: Retrieve event history for a specific user.
      operationId: app.get_event_history
      responses:
        200:
          description: Event history retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    sport:
                      type: string
                    city:
                      type: string
                    desc:
                      type: string
                    level:
                      type: string
                    open:
                      type: boolean
                    currentParticipants:
                      type: integer
                    maxParticipants:
                      type: integer
                    participants:
                      type: array
                      default: []
                      items:
                        type: string
        404:
          description: User not found or no event history available.

  /update_stats:
    post:
      summary: "Update user's statistics"
      operationId: app.update_stats
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user:
                  type: string
                wins:
                  type: integer
                losses:
                  type: integer
                elo:
                  type: integer
      responses:
        "200":
          description: "Statistics updated successfully"
        "400":
          description: "Invalid request"
        "500":
          description: "Internal server error"

  /get_user_info2:
    get:
      summary: Get User Information
      description: Retrieve user information from the database.
      operationId: app.get_user_info2
      parameters:
        - name: username
          in: query
          description: The username of the user to retrieve information.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  address:
                    type: string
                  state:
                    type: string
                  country:
                    type: string
                  zipCode:
                    type: string
                  city:
                    type: string
                  age:
                    type: string
                  birthday:
                    type: string
                  gender:
                    type: string
                  imageData:
                    type: string
                  profileImage:
                    type: string
                  blocked:
                    type: boolean
                  blocker:
                    type: string
                  blocked_users:
                    type: array
        "404":
          description: User not found

  /clear_notifications:
    post:
      summary: "Clear Notifcations"
      operationId: app.clear_notifications
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: "Cleared Notifications Successfully"
        "400":
          description: "Invalid request"
        "500":
          description: "Internal server error"
  # /refresh_msg:
  #   post:
  #     operationId: app.refresh_msg
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               chat_key:
  #                 type: string
  #     responses:
  #       "200":
  #         description: "Refreshed Messages"

  # /messages:
  #   post:
  #     operationId: app.init_messages
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #               friends:
  #                 type: array
  #     responses:
  #       "200":
  #         description: "Checked Messages"

  # /stats:
  #   post:
  #     operationId: app.check_stats
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: array
  #     responses:
  #       "200":
  #         description: "Checked Stats"

  # /fetch_friends:
  #   post:
  #     operationId: app.fetch_friends
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #     responses:
  #       "200":
  #         description: "Created Request"
