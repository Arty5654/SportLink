openapi: "3.0.2"
info:
  title: "Sportlink API"
  version: "1.0"

paths:
  # account creation endpoints
  /create_account:
    post:
      operationId: app.create_account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                friends:
                  type: array
                  default: []
                  items:
                    type: string
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        "401":
          description: Email already has an account!

  /google_signin:
    post:
      operationId: app.google_signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                googleId:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                city:
                  type: string
                displayAge:
                  type: boolean
                  description: "Toggle age visibility"
                displayLocation:
                  type: boolean
                  description: "Toggle location visibility"
                accountPrivacy:
                  type: boolean
                  description: "Toggle account privacy"
                displayPhoneNumber:
                  type: string
                  description: "Toggle phone number visibility"

      responses:
        "201":
          description: Google User Account Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        "200":
          description: Google User Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  friends:
                    type: array
                    items:
                      type: string
                required:
                  - username
        "401":
          description: Incorrect email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  #login endpoint
  /login:
    post:
      operationId: app.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phoneNumber:
                    type: string
                  friends:
                    type: array
                    items:
                      type: string
                required:
                  - email
                  - username
        "401":
          description: Incorrect email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /get_token:
    post:
      operationId: app.get_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password Reset email sent!
        "401":
          description: Email does not exist!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /input_reset_token:
    post:
      operationId: app.input_reset_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                reqToken:
                  type: string
      responses:
        "200":
          description: Password Token Verified!
        "401":
          description: Incorrect token!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /change_user_password:
    post:
      operationId: app.change_password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Password Changed!
        "401":
          description: Error!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /update_profile:
    post:
      operationId: app.update_user_profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                phoneNumber:
                  type: string
                address:
                  type: string
                state:
                  type: string
                country:
                  type: string
                zipCode:
                  type: string
                city:
                  type: string
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /privacy:
    post:
      summary: "Update privacy settings"
      operationId: app.update_user_privacy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayAge:
                  type: boolean
                  description: "Toggle age visibility"
                displayLocation:
                  type: boolean
                  description: "Toggle location visibility"
                accountPrivacy:
                  type: boolean
                  description: "Toggle account privacy"
                displayPhoneNumber:
                  type: string
                  description: "Toggle phone number visibility"
      responses:
        "200":
          description: "Profile updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  #   /update_games:
  #     post:
  #       operationId: app.gamesUpdate
  #       requestBody:
  #         required: true
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 skill:
  #                   type: int
  #                 maxPlayers:
  #                   type: int
  #                 sport:
  #                   type: string
  #                 location:
  #                   type: string
  #                 which:
  #                   type: int
  #       responses:
  #         '201':
  #           description: User created successfully
  #         '401':
  #           description: Email already has an account!
  # # friends endpoint
  #   /retrieve_friends:
  #     get:
  #       summary: Retrieve Friends
  #       description: Retrieve a list of friends for a specific user.
  #       operationId: app.retrieve_friends
  #       parameters:
  #         - name: user_id
  #           in: query
  #           description: The user id for which to retrieve friends.
  #           required: true
  #           schema:
  #             type: string
  #       responses:
  #         '200':
  #           description: Successful response
  #           content:
  #             application/json:
  #               schema:
  #                 type: object
  #                 properties:
  #                   friends:
  #                     type: array
  #                     items:
  #                       type: string
  #         '400':
  #           description: Bad Request
  #         '500':
  #           description: Internal Server Error

# add friend endpoint
  /add_friend:
    post:
      operationId: app.add_friend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                friend_email:
                  type: string
      responses:
        "200":
          description: Friend added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Friend already added!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  # # remove friend endpoint
  # /remove_friend:
  #   post:
  #     operationId: app.remove_friend
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #               friend_email:
  #                 type: string
  #     responses:
  #       "200":
  #         description: Friend removed successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #       "401":
  #         description: Friend not found!
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   type: string
